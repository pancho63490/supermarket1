<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>NSAppTransportSecurity</key>
	<dict>
		<key>NSAllowsArbitraryLoad</key>
		<true/>
	</dict>
	<key>import SwiftUI
import AVFoundation
import Vision

struct TextRecognitionView: UIViewControllerRepresentable {
    func makeUIViewController(context: Context) -&gt; TextRecognitionViewController {
        return TextRecognitionViewController()
    }
    
    func updateUIViewController(_ uiViewController: TextRecognitionViewController, context: Context) {}
}

class TextRecognitionViewController: UIViewController, AVCapturePhotoCaptureDelegate {
    var captureSession: AVCaptureSession!
    var photoOutput: AVCapturePhotoOutput!
    var previewLayer: AVCaptureVideoPreviewLayer!
    var detectionRectangle: UIView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        captureSession = AVCaptureSession()
        
        guard let videoCaptureDevice = AVCaptureDevice.default(for: .video) else { return }
        let videoInput: AVCaptureDeviceInput
        
        do {
            videoInput = try AVCaptureDeviceInput(device: videoCaptureDevice)
        } catch {
            return
        }
        
        if (captureSession.canAddInput(videoInput)) {
            captureSession.addInput(videoInput)
        } else {
            return
        }
        
        photoOutput = AVCapturePhotoOutput()
        if (captureSession.canAddOutput(photoOutput)) {
            captureSession.addOutput(photoOutput)
        } else {
            return
        }
        
        previewLayer = AVCaptureVideoPreviewLayer(session: captureSession)
        previewLayer.frame = view.layer.bounds
        previewLayer.videoGravity = .resizeAspectFill
        view.layer.addSublayer(previewLayer)
        
        detectionRectangle = UIView()
        detectionRectangle.layer.borderColor = UIColor.red.cgColor
        detectionRectangle.layer.borderWidth = 2
        view.addSubview(detectionRectangle)
        
        captureSession.startRunning()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        previewLayer.frame = view.layer.bounds
        let rectOfInterest = previewLayer.layerRectConverted(fromMetadataOutputRect: CGRect(x: 0.2, y: 0.3, width: 0.6, height: 0.4))
        detectionRectangle.frame = rectOfInterest
    }
    
    @IBAction func capturePhoto(_ sender: Any) {
        let settings = AVCapturePhotoSettings()
        photoOutput.capturePhoto(with: settings, delegate: self)
    }
    
    func photoOutput(_ output: AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVCapturePhoto, error: Error?) {
        guard let imageData = photo.fileDataRepresentation() else { return }
        guard let image = UIImage(data: imageData) else { return }
        
        let imageRequestHandler = VNImageRequestHandler(cgImage: image.cgImage!, options: [:])
        
        let textRecognitionRequest = VNRecognizeTextRequest { (request, error) in
            guard let observations = request.results as? [VNRecognizedTextObservation] else { return }
            
            for observation in observations {
                guard let topCandidate = observation.topCandidates(1).first else { continue }
                print("Detected text: \(topCandidate.string)")
            }
        }
        
        textRecognitionRequest.regionOfInterest = CGRect(x: 0.2, y: 0.3, width: 0.6, height: 0.4)
        
        do {
            try imageRequestHandler.perform([textRecognitionRequest])
        } catch {
            print("Error recognizing text: \(error)")
        }
    }
    
    override var prefersStatusBarHidden: Bool {
        return true
    }
    
    override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return .portrait
    }
}
Privacy - Camera Usage Description</key>
	<string></string>
</dict>
</plist>
